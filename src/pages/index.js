import Head from 'next/head'
import Link from 'next/link'
import { Inter } from "next/font/google"
import styles from '@/styles/Home.module.css'
import { useState, useEffect,} from 'react';
import { useCookies } from 'react-cookie';

const inter = Inter({
  subsets: ['latin'] ,
  variable: '--inter-font',
})

export default function Home() {

  // --- Username change feature ---

  const [name, setName] = useCookies(['name']);
  const [nameState, setNameState] = useState('');

  // Set default name "Guest" if cookie is null
  useEffect(() => {
    const cookieName = name.name;
    if (cookieName) {
      setNameState(cookieName);
    } else {
      setNameState('Guest');
      setName('name', 'Guest');
    }
  }, [name]);

  // Run function if name change is prompted
  function handleNameChange() {
    const newName = prompt('Enter a new name:', nameState);
    if (newName !== null && newName !== '') {
      setName('name', newName);
      setNameState(newName);
    }
  }

  // Update greeting
  function getGreeting() {
    if (nameState.length < 6) {
      return `Good Morning, ${nameState}!`;
    } else {
      return `Hello, ${nameState}!`;
    }
  }

  // --- Todo list cookies ---

  const [todos, setTodos] = useState([]);
  const [cookies, setCookie] = useCookies(['todos']);

  // Read todos cookie
  useEffect(() => {
    const todosFromCookies = cookies.todos || [];
    setTodos(todosFromCookies);
  }, [setTodos]);

  // Write todos cookie on update
  useEffect(() => {
    setCookie('todos', todos, { path: '/' });
  }, [todos, setCookie]);

  // --- Todo list parsing ---

  const [currentDate, setCurrentDate] = useState('');

  // Parse current date
  useEffect(() => {
    const date = new Date();
    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const monthsOfYear = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const dayOfWeek = daysOfWeek[date.getDay()];
    const dayOfMonth = date.getDate();
    const monthOfYear = monthsOfYear[date.getMonth()];
    setCurrentDate(`${dayOfWeek} ${dayOfMonth} ${monthOfYear}`); // Format: Tue 23 May (DoW DoM MoY)
  }, []);

  // Separate the tasks due today from the rest
  const today = new Date().toISOString().substring(0, 10);
  const tasksDueToday = todos.filter(task => task.dueDate === today);
  const tasksDueLater = todos.filter(task => task.dueDate !== today);

  // Group the tasks due later by week
  const tasksByWeek = tasksDueLater.reduce((acc, task) => {
    const dueDate = new Date(task.dueDate);
    const weekStart = new Date(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate() - dueDate.getDay());
    const weekEnd = new Date(dueDate.getFullYear(), dueDate.getMonth(), dueDate.getDate() - dueDate.getDay() + 6);
    const week = `${weekStart.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${weekEnd.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;
    if (!acc[week]) {
      acc[week] = [];
    }
    acc[week].push(task);
    return acc;
  }, {});

  // Sort the weeks in ascending order
  const sortedWeeks = Object.keys(tasksByWeek).sort();

  // Get priority for task (display it as a CSS class to distinct colors)
  function getClassForPriority(priority) {
    switch (priority) {
      case 'High':
        return 'highPriority';
      case 'Medium':
        return 'mediumPriority';
      case 'Low':
        return 'lowPriority';
      default:
        return '';
    }
  }

  // Get human readable due date for task (instead of "2023-06-07", show "June 7")
  function getHumanReadableDueDate(dueDate) {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const nextFriday = new Date(today);
    nextFriday.setDate(nextFriday.getDate() + (5 + 7 - nextFriday.getDay()) % 7);
  
    const due = new Date(dueDate);
    if (due.toDateString() === today.toDateString()) {
      return 'Due Today';
    } else if (due.toDateString() === tomorrow.toDateString()) {
      return 'Due Tomorrow';
    } else {
      const options = { month: 'long', day: 'numeric' };
      return `Due ${due.toLocaleDateString(undefined, options)}`;
    }
  }
  
  // --- JSX code ---

  return (
    <>
      <Head>
        <title>Home</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <meta name="viewport" content="width=device-width, initial-scale=1" />
  
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <main className={styles.main}>
        <div className={inter.variable}>
          <img src="/iPhone 13 - Starlight.png" className={styles.phoneBezel} />
          <div className={styles.container}>
            <div className={styles.header}>
              <div className={styles.headerTop}>
                <div className={styles.settings} onClick={handleNameChange}>
                  <img src="/settings.svg" className={styles.settingsSvg} />
                </div>
              </div>
              <div className={styles.headerBottom}>
                <h1 className={styles.toast}>{getGreeting()}</h1>
                <h3 className={styles.currentDate}>Today, {currentDate}</h3>
              </div>
            </div>
            <div className={styles.taskList}>
              <ul>
                {tasksDueToday.map((todo, index) => (
                  <li key={index}>
                    <Link href={`/viewtask?id=${todo.id}`} className={`${styles.taskContainerLarge} ${styles[getClassForPriority(todo.priority)]}`}>
                      <h2 className={styles.taskTitleLarge}>{todo.name}</h2>
                      <p className={styles.taskDueDate}>üóìÔ∏è  {getHumanReadableDueDate(todo.dueDate)}</p>
                    </Link>
                  </li>
                ))}
              </ul>
            
              {sortedWeeks.map((week, index) => (
                <div key={index}>
                  <h2 className={styles.taskSectionDate}>{week}</h2>
                  <ul>
                    {tasksByWeek[week].map((todo, index) => (
                      <li key={index}>
                        <Link href={`/viewtask?id=${todo.id}`} className={`${styles.taskContainerSmall} ${styles[getClassForPriority(todo.priority)]}`}>
                          <h2 className={styles.taskTitleSmall}>{todo.name}</h2>
                          <p className={styles.taskDueDate}>üóìÔ∏è  {getHumanReadableDueDate(todo.dueDate)}</p>
                        </Link>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>

            <Link href="/addtask" className={styles.addTaskButton}>
              <img src="/addtask.svg" className={styles.addTaskSvg} />
            </Link>
          </div>
        </div>
      </main>
    </>
  )
}